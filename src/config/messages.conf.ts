export const messages = {
    riskTools: 'Successfully listed all risk tools',
    invalidURL: 'Invalid URL',
    moreThanOne: 'General Multiplier cannot be more than one',
    operationFailed: 'Failed to perform operation, please try again.',
    querySearched: 'Query searched was success',
    riskToolCreated: 'Risk Tool was successfully created',
    riskToolUpdated: 'Risk Tool was successfully updated',
    notAllowedToDelete: 'You are not eligible to perform this operation',
    dataPointCreated: 'Data point was successfully created',
    dataPointUpdated: 'Data point  was successfully updated',
    dataPoints: 'Successfully listed all data points',
    dataPointsFetchOne: 'Data point fetched successfully',
    riskToolFetchOne: 'Risk Service fetched successfully',
    logoutFailed: 'Failed to logout, please try again',
    newPasswordGen: 'New Password Generated, Please check your inbox or spam to retrieve a new logon password.',
    sessionDeactive: 'Session deactivated successfully, Please check your inbox or spam to retrieve a new logon password.',
    noRefToken: 'This Hash sent does not exist',
    newPasswordGenFailed: 'Failed to generate new password, please try again',
    logoutSuccess: 'Logout successfully',
    errorEncountered: 'Error encountered, please try again',
    hashMismacth: 'Invalid Token provided. Please try again',
    noRedisStore: 'Invalid Token or Token expired.',
    list: 'Information was successfully listed',
    emailVerificationSent: 'Verification Email was successfully sent. please check your inbox or spam.',
    emailConfirm: 'Email Account was successfully verified. Thank you.',
    passwordChanged: 'Password was successfully changed.',
    passwordFailed: 'Unable to change password, please try again.',
    previousPassDisallowed: 'You cannot use your previous password as new password.',
    passwordDoNotMatch: 'Password do not match, please try again.',
    oldPasswordDoNotMatch: 'Old Password do not match, please try again.',
    noFound: 'The specified requirement is not found, please use valid credentials',
    notFound: 'The specified requirement is not found, please use valid credentials',
    alreadyExist: 'Information supplied already exist, please try again.',
    unable: 'Failed to update information, please try again',
    failedUpload: 'Failed to upload file, please try again.',
    imageBase64: 'Please specify base64 image and try again.',
    doesNotExistInUser: 'The provided information does not exist for this user, please try again',
    disabledByAdmin: 'Please contact the administrator to allow this operation.',
    noAuthHeader: 'Kindly Provide Authorization Header in request',
    sessionExpired: 'Your session has expired',
    notAuthorized: 'You are not authorized to have access to this resource',
    notAuthorizedPerform: 'You are not authorized to have perform this operation',
    notOrganizationUser: 'This consumer does not belong to your organization.',
    notBillerOrganization: 'This Organization does not belong to you.',
    notBillerOrganizationItem: 'This item does not belong to your organization.',
    authorizationError: 'Unable to verify user credentials',
    notAccount: 'This account does not exist or match account we found',
    unassign: 'You cannot unassign selected information due to its usage by one or more resources',
    removeAsDefault: 'You cannot delete an information set as default. Please remove as default and try again',
    failed: 'No Data found',
    failedToToggle: 'Toggle failed',
    failedToDelete: 'Delete Operation Failed.',
    deleteSuccess: 'This information was successfully deleted',
    userDelete: 'User deleted successfully.',
    accountDelete: 'Account deleted successfully.',
    orgDelete: 'Organization deleted successfully.',
    itemtDelete: 'Item deleted successfully.',
    toggle: 'Toggling was successfully',
    base64: 'Invalid base64 in file sent',
    emailExist: 'Email already exist',
    fileKey: 'No File Name Specified. please provide file name',
    invalidPwd: 'Invalid Password, Password should contain at least 8 characters having an uppercase letter, a special character and a number.',
    auth: {
        success: 'Login was successful',
        failed: 'Invalid login',
    },
    categories: {
        fetchOne: 'Category fetched successfully',
        create: {
            success: 'Categories was successfully created',
            failed: 'Failed while creating item(s)',
        },
        update: {
            success: 'Categories was successfully updated',
            failed: 'Failed while updating item(s)',
        },
        list: {
            success: 'Categories listed was successful',
            failed: 'No data found',
        },
        assign: {
            failed: 'Unable to assign groups/payment lines to Category',
            groups: 'Groups was successfully assigned',
            paymentLines: 'Payment lines was successfully assigned',
            success: 'Groups/Payment lines was successfully assigned',
        },
        unassign: {
            failed: 'Unable to assign groups/payment lines to Category',
            groups: 'Groups was successfully deleted',
            paymentLines: 'Payment lines was successfully deleted',
            success: 'Groups/Payment lines was successfully deleted',
        },
    },
    services: {
        fetchOne: 'Service fetched successfully',
        create: {
            success: 'Services was successfully created',
            failed: 'Failed while creating item(s)',
        },
        update: {
            success: 'Services was successfully updated',
            failed: 'Failed while updating item(s)',
        },
        list: {
            success: 'Services listed was successful',
            failed: 'No data found',
        },
    },
    users: {
        created: 'User successfully created',
        updated: 'User successfully update',
        list: {
            success: 'users paginated list was successful',
            failed: 'No data found',
        },
        one: {
            success: 'user was successfully fetched',
            failed: 'No User found',
        },
    },
    history: {
        list: {
            success: 'History paginated list was successful',
            failed: 'No data found',
        },
        one: {
            success: 'History was successfully fetched',
            failed: 'No User found',
        },
    },
    validations: {
        req: {
            failed: 'Validation failed for supplied information',
            toValidate: 'invalid key in request',
            apiAccess: 'No access granted for you on this resource',
        },
    },
    invalid: {
        extension: 'Invalid File Extension',
        file_name: 'Invalid File name',
    },
    storage: {
        notFound: 'Cannot remove unknown key in file storage',
    },
};